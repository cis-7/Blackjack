#include <iostream>
#include <string>
#include <algorithm>
#include <ctime>
using namespace std;

string mainDeck[52];

string suits[4] = { "C","D","H","S" };

string cards[13] = { "2","3","4","5","6","7","8","9","10","J","Q","K","A" };

//create arrays that will hold the value of cards drawn for the player and the dealer???
string Player[52], Dealer[52];


//initialize the player and dealer index at 0 since at the beginning nothing has been drawn.
int playerInd = 0, dealerInd = 0;

//initialize the deck index to 51 to represent the 52 cards that can possibly be drawn
int deckIndex = 51;

// declaring a vector of pairs with different data types
pair <string, int> Points[13];

//function that only loads the mainDeck array so that mainDeck can be used in the randomshuffle function
void initAndShuffleDeck() {

	for (int i = 0; i<4; i++) {

		for (int j = 0; j<13; j++) {

			//having mainDeck is loaded by two arrays one that holds cards and one that holds suits

			mainDeck[13 * i + j] = cards[j] + suits[i];

		}

	}

	srand(time(0));

	random_shuffle(&mainDeck[0], &mainDeck[52]);

}

//function which only outputs what is drawn from the mainDeck after two random cards are randomly selected
/*void printDeck() {

	for (int i = 0; i<4; i++) {

		for (int j = 0; j<13; j++) {

			cout << mainDeck[13 * i + j] << " ";

		}

		cout << endl;

	}
}*/

//function that loads the array with the points of the card drawn
int cardToPoint(string card) {
	//copy the characters from card from index 0 to it final index and store the characters into card
	card = card.substr(0, card.length() - 1);

	for (int i = 0; i<13; i++) {

		if (Points[i].first == card) {

			return Points[i].second;


		}

	}

}

//function that retrieves the points the player has by iterating through the Player array and its indexes then it keeps a total of the points in the variable sum

int getPointsPlayer() {

	int sum = 0;

	for (int i = 0; i<playerInd; i++) {

		sum += cardToPoint(Player[i]);

	}

	return sum;

}



int getPointsDealer() {

	int sum = 0;

	for (int i = 0; i<dealerInd; i++) {

		sum += cardToPoint(Dealer[i]);

	}

	return sum;

}

//function that carries out draw, it increments player array as mainDeck is decermented it also increments the dealer array as the mainDeck gets decremented
void drawCardsFirstTime() {

	Player[playerInd++] = mainDeck[deckIndex--];

	Player[playerInd++] = mainDeck[deckIndex--];

	//output Player cards by using the Player array???
	cout << "Player Cards: " << Player[playerInd - 1] << " " << Player[playerInd - 2];

	Dealer[dealerInd++] = mainDeck[deckIndex--];

	//only cout the first card dealt to the dealer which is located a index zero
	cout << "\tDealer Cards: " << Dealer[dealerInd - 1] << " |/|" << endl;

	//The second card drawn but withheld from being outputted
	Dealer[dealerInd++] = mainDeck[deckIndex--];

}


bool endGame() {

	cout << "Enter 0 to Quit else 1: ";
	char command;
	cin >> command;


	if (command == '0') {

		return true;
	}

	return false;
}


char getAction() {

	cout << "S - Stand" << endl;
	cout << "H - Hit" << endl;
	cout << "Enter the move you want to make: ";
	char command;
	cin >> command;


	if (command == 'H' || command == 'S') {

		return command;

	}

	else {

		cout << "Invalid command" << endl;

		getAction();

	}

}

//function which outputs the card dealt if user chooses to  Hit

void onHit() {

	Player[playerInd++] = mainDeck[deckIndex--];

	cout << "Card Drawn: " << Player[playerInd - 1] << endl;

}


void restart() {

	playerInd = 0;

	dealerInd = 0;

	deckIndex = 51;

	initAndShuffleDeck();

}



void playGame() {

	drawCardsFirstTime();


	if (getPointsPlayer() == 21) {

		if (endGame()) {

			return;

		}

	}


	while (getPointsPlayer() <= 21) {

		char a = getAction();


		if (a == 'H') {

			onHit();

		}

		if (a == 'S') {

			break;

		}

	}



	if (getPointsPlayer()>21) {

		cout << "Player Bust" << endl;

	}

	else {


		if (getPointsDealer() <= 16) {

			Dealer[dealerInd++] = mainDeck[deckIndex--];

		}



		if (getPointsDealer()>21) {

			cout << "Dealer Bust" << endl;

		}

		else {


			if (getPointsDealer() >= getPointsPlayer()) {

				cout << "Player Lost" << endl;

			}

			else {

				cout << "Player Won" << endl;

			}

		}

	}

	if (endGame()) {

		return;
	}

	else {
		restart();

		playGame();

	}
}


int main() {

	initAndShuffleDeck();

	playGame();
}
